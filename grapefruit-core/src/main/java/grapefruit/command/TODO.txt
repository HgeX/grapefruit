- Command call listeners existed in grapefruit 1, I'd like to have them in this version too, maybe
  having more stages to register call listeners to. Maybe [ PRE_PARSE, PRE_EXECUTION, POST_EXECUTION, FAILED ].
  Unlike the first version, this time they could actually get access to the current CommandContext
  instance as that's already created when CommandDispatcher#dispatch is called. The registration shall
  happen in DispatcherConfigurer as that's where every bit of configuration is done.

- Add more documentation.

- Add tests.

- Introduce description system. @CommandDefinition, @Arg, and @Flag annotations should have a "description"
  parameter ("" by default), and if a command syntax exception is thrown, these descriptions should be included
  so that they can be printed to the user. Optionally, we might want to have description lookup/provider system,
  which could be used for the localization of descriptions.

- Configurable "man" command or "--help -h -?" flags for printing command and argument descriptions as
  well as the correct command syntax.

- Investigate if having a @Suggestions(String[]) annotation to provide custom suggestions for a command
  argument is a good idea. Maybe it is, maybe it isn't.

- Returning a result from a command handler could be cool. Generate code so that if the annotated method's return type
  isn't void, we store the result in the correct command context mapped to COMMAND_RESULT_KEY or something.

- Codegen module: collectRelevantAnnotations (per parameter)

- [code-gen]: See what happens, if nested classes have command methods in them. They probably work fine, but the container class will be
  named after the original class's parent class, so if we have command methods in both the parent and nested class, the container names
  will clash.

- [core]: Rework command syntax system.
- [core]: Get rid of some of the exception classes, if possible.

- [code-gen]: Add a name cache, so we can detect names that would clash. Right now sanitization would turn both 'ab:c' and 'ab-c' into 'ab_c',
  which could cause issues later. We would need to somehow keep track of parameter names, types and key name.

- Investigate, if having some sort of proper chain when parsing an argument would make sense. Something like mapper->filters->modifiers
